{"version":3,"sources":["ui/styles/Root.tsx","gql/generated.tsx","services/pizza/index.ts","services/apollo/index.ts","hooks/apollo/index.ts","data/pizza.ts","services/guard/index.ts","views/PizzaComposer/PizzaEditor/ToppingPicker/index.tsx","views/PizzaComposer/PizzaEditor/index.tsx","ui/pizza/SizePicker/index.tsx","views/PizzaComposer/index.tsx","index.tsx","App.tsx"],"names":["Reset","createGlobalStyle","_templateObject","GoogleFont","_templateObject2","props","css","_templateObject3","encodeURIComponent","family","isMain","_templateObject4","TypoBase","_templateObject5","RootStyles","react_default","a","createElement","Fragment","PizzaSizes","getPizzaSizeByType","sizesData","size","find","singleSize","name","Large","Medium","Small","convertPizzaSizeEnumToName","calculatePizzaPrice","_ref2","sizeType","toppings","sizeData","price","basePrice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","httpLink","HttpLink","uri","process","AppLink","ApolloLink","from","cache","InMemoryCache","dataIdFromObject","obj","id","defaultDataIdFromObject","apolloClient","ApolloClient","link","query","defaultHookOptions","arguments","length","hookDefaultOptions","Object","objectSpread","client","Error","read","variables","optimistic","readQuery","write","_ref","data","writeQuery","instanceOptions","queryResult","useQuery","dataWithNullsOmmited","nextValue","forceWrite","valueRef","useRef","includes","current","useOmitNulls","loading","update","recipe","createQueryHook","gql","pizza_templateObject","usePizzaSizesRaw","usePizzaSizes","_usePizzaSizesRaw","sizes","getter","backupValue","error","getSafely","pizzaSizes","getSize","isLoading","Holder","styled","div","ToppingPicker_templateObject","isEnabled","ToppingPicker_templateObject2","ToppingPicker","onPicked","pickLabel","map","topping","index","key","concat","onClick","toFixed","PizzaEditor_templateObject","PizzaEditor","pizza","onChange","onRemoveRequest","_usePizzaSizes","pizzaSizeData","canAddTopping","maxToppings","canAddMoreToppingsToPizza","handleToppingsChange","newToppings","newPizza","PizzaEditor_Holder","indexToRemove","filter","toppingConnection","toConsumableArray","PizzaSizePicker","NewPizzaHolder","PizzaComposer_templateObject","PizzaHolder","PizzaComposer_templateObject2","PizzaComposer","_ref$pizzas","pizzas","handlePizzaUpdate","updatedPizza","newData","totalPrice","reduce","total","anotherPizza","pizzaIndex","removePizza","changedPizzaData","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setPizzas","document","getElementById"],"mappings":"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","file":"static/js/main.4381e9ea.chunk.js","sourcesContent":["import React from 'react';\nimport { createGlobalStyle, css } from 'styled-components';\n\nconst Reset = createGlobalStyle`\n  /* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n  */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`;\n\ninterface GoogleFontProps {\n  family: string;\n  isMain?: boolean;\n}\n\nconst GoogleFont = createGlobalStyle`\n  ${(props: GoogleFontProps) => {\n    return css`\n      @import url('https://fonts.googleapis.com/css?family=${encodeURIComponent(\n        props.family,\n      )}&display=swap');\n    `;\n  }}\n\n  ${(props: GoogleFontProps) => {\n    if (!props.isMain) {\n      return null;\n    }\n\n    return css`\n      body {\n        font-family: ${props.family};\n      }\n    `;\n  }}\n`;\n\nconst TypoBase = createGlobalStyle`\n  input {\n    font-family: inherit;\n  }\n\n  th {\n    text-align: left;\n  }\n\n  strong {\n    font-weight: bold;\n  }\n`;\n\nexport function RootStyles() {\n  return (\n    <>\n      <Reset />\n      <TypoBase />\n      <GoogleFont isMain family=\"Open Sans\" />\n    </>\n  );\n}\n","export type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  ParsableDate: string;\n  DateTime: Date;\n};\n\nexport type PizzaSize = {\n  __typename?: 'pizzaSize';\n  /** The size of the pizza */\n  name: Scalars['String'];\n  /** Max number of allowable toppings. */\n  maxToppings?: Maybe<Scalars['Int']>;\n  /** Toppings allowed on this pizza, and whether or not they're default selected */\n  toppings: Array<Maybe<PizzaToppingConnection>>;\n  /** Base price of the pie - sans toppings */\n  basePrice: Scalars['Float'];\n};\n\nexport enum PizzaSizes {\n  Large = 'LARGE',\n  Medium = 'MEDIUM',\n  Small = 'SMALL',\n}\n\nexport type PizzaToppingConnection = {\n  __typename?: 'pizzaToppingConnection';\n  /** The pizza size */\n  pizzaSize: PizzaSize;\n  /** The topping */\n  topping: Topping;\n  /** whether or not this topping should be selected by default for this pizza */\n  defaultSelected: Scalars['Boolean'];\n};\n\nexport type Query = {\n  __typename?: 'query';\n  /** All available pizza sizes */\n  pizzaSizes: Array<Maybe<PizzaSize>>;\n  /** Pizza size by name */\n  pizzaSizeByName?: Maybe<PizzaSize>;\n};\n\nexport type QueryPizzaSizeByNameArgs = {\n  name?: Maybe<PizzaSizes>;\n};\n\nexport type Topping = {\n  __typename?: 'topping';\n  /** The name of the topping */\n  name: Scalars['String'];\n  /** How much this topping costs */\n  price: Scalars['Float'];\n};\n\nexport type PizzaSizesQueryVariables = {};\n\nexport type PizzaSizesQuery = { __typename?: 'query' } & {\n  pizzaSizes: Array<\n    Maybe<\n      { __typename?: 'pizzaSize' } & Pick<\n        PizzaSize,\n        'name' | 'maxToppings' | 'basePrice'\n      > & {\n          toppings: Array<\n            Maybe<\n              { __typename?: 'pizzaToppingConnection' } & Pick<\n                PizzaToppingConnection,\n                'defaultSelected'\n              > & {\n                  topping: { __typename?: 'topping' } & Pick<\n                    Topping,\n                    'name' | 'price'\n                  >;\n                }\n            >\n          >;\n        }\n    >\n  >;\n};\n","import { PizzaSizes, Topping, PizzaSize } from 'gql';\n\nexport interface ComposedPizza {\n  sizeType: PizzaSizes;\n  toppings: Topping[];\n}\n\nexport function convertPizzaSizeEnumToName(size: PizzaSizes) {\n  switch (size) {\n    case PizzaSizes.Large:\n      return 'large';\n    case PizzaSizes.Medium:\n      return 'medium';\n    case PizzaSizes.Small:\n      return 'small';\n    default:\n      return null;\n  }\n}\n\nexport function getPizzaSizeByType(sizesData: PizzaSize[], size: PizzaSizes) {\n  return sizesData.find(\n    (singleSize) => singleSize.name === convertPizzaSizeEnumToName(size),\n  );\n}\n\nexport function canAddMoreToppingsToPizza(\n  { sizeType, toppings }: ComposedPizza,\n  sizesData: PizzaSize[],\n) {\n  const sizeData = getPizzaSizeByType(sizesData, sizeType);\n\n  if (!sizeData) {\n    return false;\n  }\n\n  if (sizeData.maxToppings === null) {\n    return true;\n  }\n\n  return toppings.length < sizeData.maxToppings;\n}\n\nexport function getToppingsForPizzaSize(\n  size: PizzaSizes,\n  sizesData: PizzaSize[],\n) {\n  const sizeData = getPizzaSizeByType(sizesData, size);\n\n  return sizeData.toppings;\n}\n\nexport function calculatePizzaPrice(\n  { sizeType, toppings }: ComposedPizza,\n  sizesData: PizzaSize[],\n) {\n  const sizeData = getPizzaSizeByType(sizesData, sizeType);\n\n  if (!sizeData) {\n    return null;\n  }\n\n  let price = sizeData.basePrice;\n\n  for (const topping of toppings) {\n    price += topping.price;\n  }\n\n  return price;\n}\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { defaultDataIdFromObject, InMemoryCache } from 'apollo-cache-inmemory';\n\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_API_URL,\n});\n\nconst AppLink = ApolloLink.from([httpLink]);\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: (obj) => obj.id || defaultDataIdFromObject(obj),\n});\n\nexport const apolloClient = new ApolloClient({\n  link: AppLink,\n  cache,\n});\n","import { DataProxy } from 'apollo-cache';\nimport { useRef } from 'react';\nimport { OperationVariables } from 'react-apollo';\nimport {\n  QueryHookOptions,\n  QueryHookResult,\n  useQuery,\n} from 'react-apollo-hooks';\n\nimport { apolloClient } from 'services';\n\nfunction getDefaultOptions() {\n  const defaultOptions: QueryHookOptions<any> = {\n    client: apolloClient,\n  };\n\n  return defaultOptions;\n}\n\n/**\n *\n * @param nextValue next value to be replaced - will be ingored if it's null or undefined\n * @param forceWrite replace current value even if its null or undefined\n */\nfunction useOmitNulls<T>(nextValue: T, forceWrite: boolean) {\n  const valueRef = useRef<T>(nextValue);\n\n  function getShouldWrite() {\n    if (forceWrite) {\n      return true;\n    }\n\n    if ([null, undefined].includes(nextValue)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (getShouldWrite()) {\n    valueRef.current = nextValue;\n  }\n\n  return valueRef.current;\n}\n\nexport function createQueryHook<Data, Variables = OperationVariables>(\n  query: any,\n  defaultHookOptions: QueryHookOptions<Variables> = {},\n) {\n  const hookDefaultOptions = {\n    ...getDefaultOptions(),\n    ...defaultHookOptions,\n  };\n\n  if (!hookDefaultOptions.client) {\n    throw new Error(`Client is required for createQueryHook`);\n  }\n\n  function useQueryHook(\n    variables?: Variables,\n    instanceOptions: QueryHookOptions<Variables> = {},\n  ): QueryHookResult<Data, Variables> {\n    const queryResult = useQuery<Data, Variables>(query, {\n      ...hookDefaultOptions,\n      ...instanceOptions,\n      variables,\n    });\n\n    /**\n     * normally - apollo sets data to null when data is loading. we want to avoid that.\n     * if data is loading - ignore null values and return previously known value\n     * if data is not loading - null might be meaningful - dont ignore it then\n     */\n    const dataWithNullsOmmited = useOmitNulls(\n      queryResult.data,\n      !queryResult.loading,\n    );\n\n    return {\n      ...queryResult,\n      data: dataWithNullsOmmited,\n    };\n  }\n\n  function read(\n    client: DataProxy,\n    variables?: Variables,\n    optimistic?: boolean,\n  ) {\n    return client.readQuery<Data, Variables>({ query, variables }, optimistic);\n  }\n\n  function write(\n    client: DataProxy,\n    { data, variables }: { variables?: Variables; data: Data },\n  ) {\n    client.writeQuery<Data, Variables>({\n      query,\n      data,\n      variables,\n    });\n  }\n\n  function update(\n    client: DataProxy,\n    recipe: (data: Data) => Data,\n    variables?: Variables,\n  ) {\n    const currentData = read(client, variables);\n\n    const newData = recipe(currentData);\n\n    write(client, { data: newData, variables });\n  }\n\n  const manager = { read, write, update };\n\n  return [useQueryHook, manager] as const;\n}\n","import { createQueryHook } from 'hooks/apollo';\nimport gql from 'graphql-tag';\nimport {\n  PizzaSizesQuery,\n  PizzaSizesQueryVariables,\n  PizzaSizes,\n  PizzaSize,\n} from 'gql';\nimport { getSafely } from 'services/guard';\nimport { getPizzaSizeByType } from 'services/pizza';\n\nconst [usePizzaSizesRaw] = createQueryHook<\n  PizzaSizesQuery,\n  PizzaSizesQueryVariables\n>(gql`\n  query PizzaSizes {\n    pizzaSizes {\n      name\n      maxToppings\n      toppings {\n        topping {\n          name\n          price\n        }\n        defaultSelected\n      }\n      basePrice\n    }\n  }\n`);\n\nexport function usePizzaSizes() {\n  const { data, loading } = usePizzaSizesRaw();\n\n  const sizes: PizzaSize[] = getSafely(\n    () => data.pizzaSizes,\n    [],\n  ) as PizzaSize[];\n\n  function getSize(size: PizzaSizes) {\n    return getPizzaSizeByType(sizes, size);\n  }\n\n  return {\n    sizes,\n    getSize,\n    isLoading: loading,\n  };\n}\n","export function getSafely<T>(\n  getter: () => T,\n  backupValue: T = null,\n  warnOnErrors = false,\n) {\n  try {\n    const value = getter();\n\n    if ([undefined].includes(value)) {\n      return backupValue;\n    }\n\n    return value;\n  } catch (error) {\n    return backupValue;\n  }\n}\n\nexport function runSafely(callback: () => void) {\n  try {\n    callback();\n  } catch (error) {}\n}\n","import React from 'react';\nimport { Topping } from 'gql';\nimport styled, { css } from 'styled-components';\n\ninterface Props {\n  toppings: Topping[];\n  onPicked: (topping: Topping, index: number) => void;\n  isEnabled: boolean;\n  pickLabel: string;\n}\n\nconst Holder = styled.div`\n  ${(props: Pick<Props, 'isEnabled'>) => {\n    if (!props.isEnabled) {\n      return css`\n        opacity: 0.3;\n        pointer-events: none;\n      `;\n    }\n  }}\n`;\n\nexport function ToppingPicker({\n  toppings,\n  onPicked,\n  pickLabel,\n  isEnabled,\n}: Props) {\n  return (\n    <Holder isEnabled={isEnabled}>\n      {toppings.map((topping, index) => {\n        return (\n          <div key={`${topping.name}-${index}`}>\n            <button onClick={() => onPicked(topping, index)}>\n              {pickLabel}\n            </button>\n            {topping.name} (${topping.price.toFixed(2)})\n          </div>\n        );\n      })}\n    </Holder>\n  );\n}\n","import React from 'react';\nimport {\n  ComposedPizza,\n  calculatePizzaPrice,\n  canAddMoreToppingsToPizza,\n} from 'services/pizza';\nimport { usePizzaSizes } from 'data';\n\nimport { ToppingPicker } from './ToppingPicker';\nimport { Topping } from 'gql';\nimport styled from 'styled-components';\n\ninterface Props {\n  pizza: ComposedPizza;\n  onChange: (data: ComposedPizza) => void;\n  onRemoveRequest: () => void;\n}\n\nconst Holder = styled.div`\n  border: 1px solid #000;\n  padding: 10px;\n`;\n\nexport function PizzaEditor({ pizza, onChange, onRemoveRequest }: Props) {\n  const { sizes, getSize, isLoading } = usePizzaSizes();\n\n  const pizzaSizeData = getSize(pizza.sizeType);\n  const price = calculatePizzaPrice(pizza, sizes);\n\n  const canAddTopping = canAddMoreToppingsToPizza(pizza, sizes);\n\n  function handleToppingsChange(newToppings: Topping[]) {\n    const newPizza: ComposedPizza = { ...pizza, toppings: newToppings };\n\n    onChange(newPizza);\n  }\n\n  function handleToppingPicked(topping: Topping) {\n    const newToppings = [...pizza.toppings, topping];\n    handleToppingsChange(newToppings);\n  }\n\n  function handleToppingRemoved(topping: Topping, indexToRemove: number) {\n    const newToppings = pizza.toppings.filter(\n      (topping, index) => index !== indexToRemove,\n    );\n    handleToppingsChange(newToppings);\n  }\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Holder>\n      <strong>Price: ${price.toFixed(2)}</strong>\n      <ToppingPicker\n        isEnabled\n        toppings={pizza.toppings}\n        onPicked={handleToppingRemoved}\n        pickLabel=\"-\"\n      />\n      <strong>Add Topping: </strong>\n      <ToppingPicker\n        isEnabled={canAddTopping}\n        toppings={pizzaSizeData.toppings.map(\n          (toppingConnection) => toppingConnection.topping,\n        )}\n        onPicked={handleToppingPicked}\n        pickLabel=\"+\"\n      />\n      <button onClick={onRemoveRequest}>Remove Pizza</button>\n    </Holder>\n  );\n}\n","import React from 'react';\nimport { PizzaSizes } from 'gql';\n\ninterface Props {\n  onPicked: (size: PizzaSizes) => void;\n}\n\nexport function PizzaSizePicker({ onPicked }: Props) {\n  return (\n    <div>\n      <button onClick={() => onPicked(PizzaSizes.Small)}>Small</button>\n      <button onClick={() => onPicked(PizzaSizes.Medium)}>Medium</button>\n      <button onClick={() => onPicked(PizzaSizes.Large)}>Large</button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { ComposedPizza, calculatePizzaPrice } from 'services/pizza';\n\nimport { PizzaEditor } from './PizzaEditor';\nimport { PizzaSizes } from 'gql';\nimport { PizzaSizePicker } from 'ui/pizza/SizePicker';\nimport { usePizzaSizes } from 'data';\nimport styled from 'styled-components';\n\ninterface Props {\n  pizzas: ComposedPizza[];\n  onChange: (newPizzas: ComposedPizza[]) => void;\n}\n\nconst NewPizzaHolder = styled.div`\n  margin-bottom: 3em;\n`;\n\nconst PizzaHolder = styled.div`\n  margin-bottom: 1em;\n`;\n\nexport function PizzaComposer({ pizzas = [], onChange }: Props) {\n  const { sizes } = usePizzaSizes();\n  function handlePizzaUpdate(index: number, updatedPizza: ComposedPizza) {\n    const newData = [...pizzas];\n    newData[index] = updatedPizza;\n\n    onChange(newData);\n  }\n\n  function addNewPizza(sizeType: PizzaSizes) {\n    const newPizza: ComposedPizza = {\n      sizeType,\n      toppings: [],\n    };\n\n    onChange([newPizza, ...pizzas]);\n  }\n\n  function removePizza(indexToRemove: number) {\n    const newData = pizzas.filter(\n      (pizza, pizzaIndex) => pizzaIndex !== indexToRemove,\n    );\n\n    onChange(newData);\n  }\n\n  const totalPrice = pizzas.reduce((total, anotherPizza) => {\n    return total + calculatePizzaPrice(anotherPizza, sizes);\n  }, 0);\n\n  return (\n    <div>\n      <NewPizzaHolder>\n        <strong>New Pizza:</strong>\n        <PizzaSizePicker onPicked={addNewPizza} />\n      </NewPizzaHolder>\n      {pizzas.map((pizza, index) => {\n        return (\n          <PizzaHolder key={index}>\n            <PizzaEditor\n              pizza={pizza}\n              onRemoveRequest={() => removePizza(index)}\n              onChange={(changedPizzaData) =>\n                handlePizzaUpdate(index, changedPizzaData)\n              }\n            />\n          </PizzaHolder>\n        );\n      })}\n      <div>\n        <strong>Total: ${totalPrice.toFixed(2)}</strong>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\n\nimport { RootStyles } from './ui';\n\nimport { PizzaComposer } from './views/PizzaComposer';\nimport { ComposedPizza } from 'services/pizza';\n\nexport function App() {\n  const [pizzas, setPizzas] = useState<ComposedPizza[]>([]);\n\n  return (\n    <>\n      <RootStyles />\n      <PizzaComposer pizzas={pizzas} onChange={setPizzas} />\n    </>\n  );\n}\n"],"sourceRoot":""}